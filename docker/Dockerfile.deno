# Multi-stage build for Deno services
FROM denoland/deno:alpine-1.39.4 AS base

# Install necessary tools for development and production
RUN apk add --no-cache \
    curl \
    bash \
    git \
    ca-certificates \
    postgresql-client \
    redis \
    jq \
    netcat-openbsd

# Create app directory
WORKDIR /app

# Create non-root user for security
RUN addgroup -g 1001 -S deno && \
    adduser -u 1001 -S deno -G deno

# Copy dependency files first for better caching
COPY --chown=deno:deno deno.json ./

# Pre-cache common dependencies to speed up development
RUN deno cache \
    https://deno.land/std@0.208.0/testing/mod.ts \
    https://deno.land/std@0.208.0/assert/mod.ts \
    https://deno.land/std@0.208.0/async/mod.ts \
    https://deno.land/std@0.208.0/http/mod.ts \
    https://deno.land/std@0.208.0/log/mod.ts

# Development stage
FROM base AS development

# Install additional development tools
RUN apk add --no-cache \
    vim \
    nano \
    htop \
    procps

# Copy shared libraries and configuration first
COPY --chown=deno:deno shared/ ./shared/
COPY --chown=deno:deno *.json ./
COPY --chown=deno:deno *.ts ./

# Create directories for services and cache
RUN mkdir -p services logs temp /home/deno/.cache/deno

# Set up proper permissions
RUN chown -R deno:deno /app /home/deno/.cache

# Switch to non-root user for development
USER deno

# Expose common ports for services and debugging
EXPOSE 8000 9090 9229

# Set development environment variables
ENV DENO_ENV=development
ENV DENO_DIR=/home/deno/.cache/deno
ENV DENO_INSTALL_ROOT=/home/deno/.local
ENV PATH="/home/deno/.local/bin:$PATH"

# Create health check script
COPY --chown=deno:deno docker/healthcheck.ts ./docker/

# Health check for development
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD deno run --allow-net docker/healthcheck.ts || exit 1

# Default development command with hot reload and debugging
CMD ["deno", "run", "--allow-all", "--watch", "--inspect=0.0.0.0:9229", "--unstable", "main.ts"]

# Builder stage for production
FROM base AS builder

# Copy all source files
COPY . .

# Run type checking
RUN deno check **/*.ts

# Run tests
RUN deno test --allow-all --parallel

# Production stage
FROM denoland/deno:alpine-1.39.4 AS production

# Install runtime dependencies only
RUN apk add --no-cache ca-certificates

# Create non-root user
RUN addgroup -g 1001 -S deno && \
    adduser -u 1001 -S deno -G deno

# Create app directory
WORKDIR /app

# Copy application files
COPY --from=builder --chown=deno:deno /app .

# Switch to non-root user
USER deno

# Expose service port
EXPOSE 8000

# Set environment to production
ENV DENO_ENV=production

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD deno eval "fetch('http://localhost:8000/health').then(() => Deno.exit(0)).catch(() => Deno.exit(1))"

# Default command (override per service with specific permissions)
CMD ["deno", "run", "--allow-net", "--allow-env", "--allow-read", "main.ts"]