version: "3.8"

services:
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: dip-kafka
    ports:
      - "9092:9092"
      - "9094:9094"
      - "9101:9101"
    environment:
      # KRaft mode configuration (replacing ZooKeeper)
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      
      # Listeners configuration
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092,OUTSIDE://0.0.0.0:9094,CONTROLLER://kafka:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092,OUTSIDE://localhost:9094'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,OUTSIDE:PLAINTEXT,CONTROLLER:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      
      # Cluster configuration
      CLUSTER_ID: '7F983492C65A4A46AF546EQk'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      
      # Storage and retention
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_COMPRESSION_TYPE: "snappy"
      
      # JMX for monitoring
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka-data:/var/lib/kafka/data
      - ./scripts/kafka-kraft-init.sh:/tmp/kafka-kraft-init.sh
    networks:
      - dip-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    entrypoint: ["/bin/bash", "-c"]
    command: |
      "
      # Format storage for KRaft if not already done
      if [ ! -f /var/lib/kafka/data/meta.properties ]; then
        echo 'Formatting Kafka storage for KRaft mode...'
        kafka-storage format -t $$CLUSTER_ID -c /etc/kafka/kafka.properties
      fi
      # Start Kafka
      /etc/confluent/docker/run
      "

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: dip-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      # Note: No ZOOKEEPER configuration needed for KRaft mode
      KAFKA_CLUSTERS_0_READONLY: "false"
      # Additional settings for better KRaft compatibility
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: PLAINTEXT
      DYNAMIC_CONFIG_ENABLED: true
    networks:
      - dip-network

  postgres:
    image: postgres:16-alpine
    container_name: dip-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: dip_user
      POSTGRES_PASSWORD: dip_password
      POSTGRES_DB: dip_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - dip-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dip_user -d dip_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: dip-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - dip-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: dip-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    networks:
      - dip-network
    depends_on:
      - kafka
      - postgres
      - redis

  grafana:
    image: grafana/grafana:latest
    container_name: dip-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana-datasources:/etc/grafana/provisioning/datasources
    networks:
      - dip-network
    depends_on:
      - prometheus

  ollama:
    image: ollama/ollama:latest
    container_name: dip-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    networks:
      - dip-network
    deploy:
      resources:
        limits:
          memory: 4G
    environment:
      OLLAMA_HOST: 0.0.0.0

networks:
  dip-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  # Note: No zookeeper volumes needed!
  kafka-data:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:
  ollama-data: