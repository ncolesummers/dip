name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  DENO_VERSION: 1.41.0

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  # Validate release version
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_tag: ${{ steps.version.outputs.version_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          # Validate version format
          if ! echo "$VERSION" | grep -qE '^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$'; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-beta"
            exit 1
          fi
          
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "version_tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "Releasing version: $VERSION"

  # Run all tests before release
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-release-${{ hashFiles('deno.json', 'deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deno-release-
            ${{ runner.os }}-deno-

      - name: Run format check
        run: deno fmt --check

      - name: Run linter
        run: deno lint

      - name: Run type check
        run: deno check shared/**/*.ts

      - name: Run tests
        run: deno test --allow-all --parallel

  # Build Docker images for each service
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [validate, test]
    strategy:
      matrix:
        service: [ingestion, classifier, routing, response]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ needs.validate.outputs.version_tag }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate.outputs.version_tag }}
            type=semver,pattern={{major}},value=${{ needs.validate.outputs.version_tag }}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Check if service exists
        id: check_service
        run: |
          if [ -d "services/${{ matrix.service }}" ] && [ -f "services/${{ matrix.service }}/main.ts" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Service ${{ matrix.service }} not found, will create placeholder"
          fi

      - name: Create placeholder service if needed
        if: steps.check_service.outputs.exists == 'false'
        run: |
          mkdir -p services/${{ matrix.service }}
          cat > services/${{ matrix.service }}/main.ts << 'EOF'
          import { serve } from "https://deno.land/std@0.208.0/http/server.ts";
          
          const port = parseInt(Deno.env.get("PORT") || "8000");
          const serviceName = "${{ matrix.service }}";
          
          console.log(`${serviceName} service starting on port ${port}`);
          
          serve((req) => {
            const url = new URL(req.url);
            
            if (url.pathname === "/health") {
              return new Response(JSON.stringify({ 
                status: "healthy", 
                service: serviceName,
                version: "${{ needs.validate.outputs.version }}"
              }), {
                headers: { "content-type": "application/json" },
                status: 200
              });
            }
            
            return new Response(JSON.stringify({ 
              message: `${serviceName} service`,
              version: "${{ needs.validate.outputs.version }}"
            }), {
              headers: { "content-type": "application/json" },
              status: 200
            });
          }, { port });
          EOF

      - name: Create Dockerfile if it doesn't exist
        run: |
          if [ ! -f "docker/Dockerfile.${{ matrix.service }}" ]; then
            mkdir -p docker
            cat > docker/Dockerfile.${{ matrix.service }} << 'EOF'
          # Build stage
          FROM denoland/deno:1.41.0 AS builder
          
          WORKDIR /app
          
          # Copy dependency files
          COPY deno.json deno.lock* ./
          
          # Copy shared libraries
          COPY shared/ ./shared/
          
          # Copy service code
          COPY services/${{ matrix.service }}/ ./services/${{ matrix.service }}/
          
          # Cache dependencies
          RUN deno cache services/${{ matrix.service }}/main.ts
          
          # Compile the service
          RUN deno compile \
            --allow-net \
            --allow-env \
            --allow-read \
            --allow-write \
            --allow-run \
            --output=${{ matrix.service }} \
            services/${{ matrix.service }}/main.ts
          
          # Runtime stage
          FROM debian:bookworm-slim
          
          # Install runtime dependencies
          RUN apt-get update && \
              apt-get install -y --no-install-recommends \
              ca-certificates \
              && rm -rf /var/lib/apt/lists/*
          
          # Create non-root user
          RUN useradd -m -u 1000 deno
          
          WORKDIR /app
          
          # Copy compiled binary
          COPY --from=builder --chown=deno:deno /app/${{ matrix.service }} .
          
          # Switch to non-root user
          USER deno
          
          # Set environment variables
          ENV SERVICE_NAME=${{ matrix.service }}
          ENV PORT=8000
          
          # Health check
          HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
            CMD ["./${{ matrix.service }}", "health"] || exit 1
          
          EXPOSE 8000
          
          ENTRYPOINT ["./${{ matrix.service }}"]
          EOF
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate.outputs.version }}
            SERVICE=${{ matrix.service }}

  # Generate changelog
  changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${{ needs.validate.outputs.version_tag }}^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, generating changelog from beginning"
            COMMIT_RANGE=""
          else
            echo "Generating changelog from $PREVIOUS_TAG to ${{ needs.validate.outputs.version_tag }}"
            COMMIT_RANGE="$PREVIOUS_TAG..${{ needs.validate.outputs.version_tag }}"
          fi
          
          # Generate changelog grouped by conventional commit types
          {
            echo "# Changelog for ${{ needs.validate.outputs.version_tag }}"
            echo ""
            echo "## Release Date: $(date -u +"%Y-%m-%d")"
            echo ""
            
            # Features
            FEATURES=$(git log $COMMIT_RANGE --pretty=format:"%s" --grep="^feat" 2>/dev/null | sed 's/^/- /')
            if [ -n "$FEATURES" ]; then
              echo "### 🚀 Features"
              echo "$FEATURES"
              echo ""
            fi
            
            # Bug Fixes
            FIXES=$(git log $COMMIT_RANGE --pretty=format:"%s" --grep="^fix" 2>/dev/null | sed 's/^/- /')
            if [ -n "$FIXES" ]; then
              echo "### 🐛 Bug Fixes"
              echo "$FIXES"
              echo ""
            fi
            
            # Performance Improvements
            PERF=$(git log $COMMIT_RANGE --pretty=format:"%s" --grep="^perf" 2>/dev/null | sed 's/^/- /')
            if [ -n "$PERF" ]; then
              echo "### ⚡ Performance Improvements"
              echo "$PERF"
              echo ""
            fi
            
            # Documentation
            DOCS=$(git log $COMMIT_RANGE --pretty=format:"%s" --grep="^docs" 2>/dev/null | sed 's/^/- /')
            if [ -n "$DOCS" ]; then
              echo "### 📚 Documentation"
              echo "$DOCS"
              echo ""
            fi
            
            # Other Changes
            OTHER=$(git log $COMMIT_RANGE --pretty=format:"%s" --grep -v "^feat\|^fix\|^perf\|^docs" 2>/dev/null | sed 's/^/- /')
            if [ -n "$OTHER" ]; then
              echo "### 🔧 Other Changes"
              echo "$OTHER"
              echo ""
            fi
            
            # Contributors
            echo "### 👥 Contributors"
            git log $COMMIT_RANGE --pretty=format:"%an" 2>/dev/null | sort -u | sed 's/^/- @/'
            echo ""
            
            # Full commit list
            echo "### 📝 Full Commit List"
            git log $COMMIT_RANGE --pretty=format:"- %h %s (%an)" 2>/dev/null
            
          } > CHANGELOG.md
          
          # Save changelog to output
          CHANGELOG=$(cat CHANGELOG.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload changelog artifact
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG.md
          retention-days: 7

  # Create GitHub release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [validate, test, build-images, changelog]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Build release artifacts
        run: |
          mkdir -p release-artifacts
          
          # Compile each service
          for service in ingestion classifier routing response; do
            if [ -f "services/$service/main.ts" ]; then
              echo "Compiling $service..."
              deno compile \
                --allow-net \
                --allow-env \
                --allow-read \
                --allow-write \
                --allow-run \
                --output=release-artifacts/${service}-linux-x64 \
                --target=x86_64-unknown-linux-gnu \
                services/$service/main.ts || echo "Service $service not found"
            fi
          done
          
          # Create tarball of source code
          tar -czf release-artifacts/source-code.tar.gz \
            --exclude=.git \
            --exclude=node_modules \
            --exclude=.deno \
            --exclude=coverage \
            --exclude=build \
            --exclude=release-artifacts \
            .
          
          # Create checksums
          cd release-artifacts
          sha256sum * > checksums.txt
          cd ..

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate.outputs.version_tag }}
          name: Release ${{ needs.validate.outputs.version_tag }}
          body: |
            ${{ needs.changelog.outputs.changelog }}
            
            ## 🐳 Docker Images
            
            The following Docker images have been published to GitHub Container Registry:
            
            - `ghcr.io/${{ github.repository }}/ingestion:${{ needs.validate.outputs.version }}`
            - `ghcr.io/${{ github.repository }}/classifier:${{ needs.validate.outputs.version }}`
            - `ghcr.io/${{ github.repository }}/routing:${{ needs.validate.outputs.version }}`
            - `ghcr.io/${{ github.repository }}/response:${{ needs.validate.outputs.version }}`
            
            ## 📦 Installation
            
            ### Using Docker
            ```bash
            docker pull ghcr.io/${{ github.repository }}/ingestion:${{ needs.validate.outputs.version }}
            ```
            
            ### Using Docker Compose
            ```bash
            curl -LO https://github.com/${{ github.repository }}/releases/download/${{ needs.validate.outputs.version_tag }}/docker-compose.yml
            docker-compose up -d
            ```
            
            ## 🔐 Verification
            
            All artifacts include SHA256 checksums for verification. Download `checksums.txt` and verify:
            
            ```bash
            sha256sum -c checksums.txt
            ```
          files: |
            release-artifacts/*
          draft: false
          prerelease: ${{ contains(needs.validate.outputs.version_tag, '-') }}
          generate_release_notes: true

  # Deploy notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [validate, release]
    if: always()
    steps:
      - name: Send success notification
        if: needs.release.result == 'success'
        run: |
          echo "✅ Release ${{ needs.validate.outputs.version_tag }} completed successfully!"
          echo "View release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.version_tag }}"

      - name: Send failure notification
        if: needs.release.result != 'success'
        run: |
          echo "❌ Release ${{ needs.validate.outputs.version_tag }} failed!"
          echo "Check workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"