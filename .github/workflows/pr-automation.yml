name: PR Automation

on:
  pull_request:
    types: [opened, edited, synchronize, ready_for_review]
  pull_request_target:
    types: [opened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # Auto-label PRs based on files changed
  auto-label:
    name: Auto Label
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Label PR based on paths
        uses: actions/labeler@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/labeler.yml
          sync-labels: true

  # Add size labels
  size-label:
    name: Size Label
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Add size label
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.issue.number;
            
            // Get PR diff statistics
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number
            });
            
            const additions = pr.additions || 0;
            const deletions = pr.deletions || 0;
            const totalChanges = additions + deletions;
            
            // Define size labels
            const sizeLabels = [
              { name: 'size:XS', min: 0, max: 10 },
              { name: 'size:S', min: 10, max: 50 },
              { name: 'size:M', min: 50, max: 200 },
              { name: 'size:L', min: 200, max: 500 },
              { name: 'size:XL', min: 500, max: Infinity }
            ];
            
            // Remove existing size labels
            const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
              owner,
              repo,
              issue_number: pull_number
            });
            
            for (const label of currentLabels) {
              if (label.name.startsWith('size:')) {
                await github.rest.issues.removeLabel({
                  owner,
                  repo,
                  issue_number: pull_number,
                  name: label.name
                }).catch(() => {}); // Ignore if label doesn't exist
              }
            }
            
            // Add appropriate size label
            const sizeLabel = sizeLabels.find(label => 
              totalChanges >= label.min && totalChanges < label.max
            );
            
            if (sizeLabel) {
              // Create label if it doesn't exist
              try {
                await github.rest.issues.getLabel({
                  owner,
                  repo,
                  name: sizeLabel.name
                });
              } catch (error) {
                const colors = {
                  'size:XS': '00ff00',
                  'size:S': '7fff00',
                  'size:M': 'ffff00',
                  'size:L': 'ff7f00',
                  'size:XL': 'ff0000'
                };
                await github.rest.issues.createLabel({
                  owner,
                  repo,
                  name: sizeLabel.name,
                  color: colors[sizeLabel.name],
                  description: `PR size: ${sizeLabel.min}-${sizeLabel.max === Infinity ? '∞' : sizeLabel.max} lines`
                });
              }
              
              // Add the label
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: pull_number,
                labels: [sizeLabel.name]
              });
              
              console.log(`Added label: ${sizeLabel.name} (${totalChanges} changes)`);
            }

  # Welcome first-time contributors
  welcome:
    name: Welcome Contributor
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event.action == 'opened' && github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'
    steps:
      - name: Welcome message
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.issue.number;
            const author = context.payload.pull_request.user.login;
            
            const welcomeMessage = `
            ## Welcome @${author}! 🎉
            
            Thank you for your first contribution to our Deno microservices project! We're excited to have you here.
            
            ### What happens next?
            
            1. **Automated checks** will run to ensure code quality
            2. A **maintainer will review** your PR soon
            3. You may receive **feedback or requests** for changes
            4. Once approved, your PR will be **merged** into the main branch
            
            ### Quick checklist:
            
            - [ ] Code follows our formatting standards (run \`deno fmt\`)
            - [ ] All tests pass (run \`deno test\`)
            - [ ] Commit messages follow conventional commits format
            - [ ] PR description clearly explains the changes
            
            ### Need help?
            
            - Check our [Contributing Guide](../CONTRIBUTING.md)
            - Join our discussions in the Issues section
            - Ask questions right here in the PR comments
            
            Thanks again for contributing! 🚀
            `;
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: welcomeMessage
            });
            
            // Add first-time contributor label
            try {
              await github.rest.issues.getLabel({
                owner,
                repo,
                name: 'first-time-contributor'
              });
            } catch (error) {
              await github.rest.issues.createLabel({
                owner,
                repo,
                name: 'first-time-contributor',
                color: '7057ff',
                description: 'First-time contributor to the project'
              });
            }
            
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: pull_number,
              labels: ['first-time-contributor']
            });

  # Check for conventional commits
  conventional-commits:
    name: Conventional Commits
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR title
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.issue.number;
            const title = context.payload.pull_request.title;
            
            // Conventional commit regex pattern
            const conventionalCommitRegex = /^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .+$/;
            
            if (!conventionalCommitRegex.test(title)) {
              const errorMessage = `
              ## ⚠️ PR Title doesn't follow Conventional Commits format
              
              Your PR title should follow the format: \`type(scope): description\`
              
              ### Valid types:
              - **feat**: A new feature
              - **fix**: A bug fix
              - **docs**: Documentation only changes
              - **style**: Changes that don't affect code meaning (white-space, formatting)
              - **refactor**: Code change that neither fixes a bug nor adds a feature
              - **perf**: Code change that improves performance
              - **test**: Adding or correcting tests
              - **build**: Changes that affect the build system or dependencies
              - **ci**: Changes to CI configuration files and scripts
              - **chore**: Other changes that don't modify src or test files
              - **revert**: Reverts a previous commit
              
              ### Examples:
              - \`feat(ingestion): add support for batch processing\`
              - \`fix(routing): resolve memory leak in event handler\`
              - \`docs: update API documentation\`
              - \`ci: add GitHub Actions workflow for releases\`
              
              **Current title:** "${title}"
              
              Please update your PR title to follow this format.
              `;
              
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pull_number,
                body: errorMessage
              });
              
              // Add label for non-conventional commits
              try {
                await github.rest.issues.getLabel({
                  owner,
                  repo,
                  name: 'needs:conventional-commit'
                });
              } catch (error) {
                await github.rest.issues.createLabel({
                  owner,
                  repo,
                  name: 'needs:conventional-commit',
                  color: 'e4e669',
                  description: 'PR title needs to follow conventional commits format'
                });
              }
              
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: pull_number,
                labels: ['needs:conventional-commit']
              });
              
              core.setFailed('PR title does not follow Conventional Commits format');
            } else {
              // Remove the label if it exists and title is now correct
              try {
                await github.rest.issues.removeLabel({
                  owner,
                  repo,
                  issue_number: pull_number,
                  name: 'needs:conventional-commit'
                });
              } catch (error) {
                // Label doesn't exist, that's fine
              }
              
              console.log(`✅ PR title follows Conventional Commits: ${title}`);
            }

  # Analyze PR content and add relevant labels
  analyze-pr:
    name: Analyze PR Content
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze and label PR
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.issue.number;
            
            // Get files changed in PR
            const { data: files } = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number,
              per_page: 100
            });
            
            const labels = new Set();
            
            // Analyze file paths and add appropriate labels
            for (const file of files) {
              const path = file.filename;
              
              // Component labels
              if (path.startsWith('shared/events/')) labels.add('component:events');
              if (path.startsWith('shared/schemas/')) labels.add('component:schemas');
              if (path.startsWith('shared/observability/')) labels.add('component:observability');
              if (path.startsWith('services/ingestion/')) labels.add('component:ingestion');
              if (path.startsWith('services/classifier/')) labels.add('component:classifier');
              if (path.startsWith('services/routing/')) labels.add('component:routing');
              if (path.startsWith('services/response/')) labels.add('component:response');
              
              // Type labels
              if (path.startsWith('.github/')) labels.add('ci/cd');
              if (path.startsWith('tests/')) labels.add('testing');
              if (path.startsWith('docs/')) labels.add('documentation');
              if (path.includes('docker') || path.includes('Dockerfile')) labels.add('docker');
              if (path.endsWith('.md')) labels.add('documentation');
              
              // Check file content for specific patterns
              if (file.patch) {
                if (file.patch.includes('TODO') || file.patch.includes('FIXME')) {
                  labels.add('has:todo');
                }
                if (file.patch.includes('console.log') || file.patch.includes('console.error')) {
                  labels.add('needs:review');
                }
              }
            }
            
            // Create labels if they don't exist
            const labelColors = {
              'component:events': '0052cc',
              'component:schemas': '0052cc',
              'component:observability': '0052cc',
              'component:ingestion': '1d76db',
              'component:classifier': '1d76db',
              'component:routing': '1d76db',
              'component:response': '1d76db',
              'ci/cd': 'c5def5',
              'testing': 'bfd4f2',
              'documentation': '0075ca',
              'docker': '2496ed',
              'has:todo': 'fbca04',
              'needs:review': 'd93f0b'
            };
            
            for (const label of labels) {
              try {
                await github.rest.issues.getLabel({
                  owner,
                  repo,
                  name: label
                });
              } catch (error) {
                if (labelColors[label]) {
                  await github.rest.issues.createLabel({
                    owner,
                    repo,
                    name: label,
                    color: labelColors[label],
                    description: `Related to ${label.replace(/[:-]/g, ' ')}`
                  });
                }
              }
            }
            
            // Add all labels to the PR
            if (labels.size > 0) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: pull_number,
                labels: Array.from(labels)
              });
              
              console.log(`Added labels: ${Array.from(labels).join(', ')}`);
            }

  # PR validation summary
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [auto-label, size-label, conventional-commits, analyze-pr]
    if: always()
    steps:
      - name: Generate PR summary
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.issue.number;
            
            // Get current labels
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner,
              repo,
              issue_number: pull_number
            });
            
            const labelNames = labels.map(l => l.name);
            
            // Build summary
            let summary = '## PR Automation Summary\n\n';
            summary += '### Labels Applied\n';
            
            if (labelNames.length > 0) {
              summary += labelNames.map(name => `- \`${name}\``).join('\n');
            } else {
              summary += '- No labels applied\n';
            }
            
            summary += '\n\n### Checks\n';
            summary += `- Conventional Commits: ${labelNames.includes('needs:conventional-commit') ? '❌ Needs fixing' : '✅ Valid'}\n`;
            summary += `- First Time Contributor: ${labelNames.includes('first-time-contributor') ? '✅ Yes - Welcome!' : '➖ No'}\n`;
            
            const sizeLabel = labelNames.find(l => l.startsWith('size:'));
            if (sizeLabel) {
              summary += `- PR Size: ${sizeLabel.replace('size:', '')}\n`;
            }
            
            console.log(summary);